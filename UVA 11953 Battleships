#include<iostream>
#include<vector>
using namespace std;

#define lp(i , n)		for(int i = 0; i < n; ++i)

int n;
char grid[101][101];
vector<vector<bool>> visited;
int di[] = { -1, 0, 1, 0, 1, -1, 1, -1 };
int dj[] = { 0, 1, 0, -1, 1, -1, -1, 1 };

bool isValid(int i, int j) {
	return (i >= 0 && i < n && j >= 0 && j < n);
}

vector<string> res;
bool fin = false;
void dfs(int i, int j) {

	visited[i][j] = true;

	lp(m , 8)
	{
		int ni = i + di[m];
		int nj = j + dj[m];

		if ((isValid(ni, nj)) && !(visited[ni][nj])
				&& (grid[ni][nj] == 'x' || grid[ni][nj] == '@')) {
			dfs(ni, nj);
		}
	}

}

int cntShips() {
	int cnt = 0;
	lp(i , n)
		lp(j , n)
			if (grid[i][j] == 'x' && !visited[i][j]) {
				dfs(i, j);
				cnt++;
			}
	return cnt;
}

int main() {
	int op = 1;
	int t;
	cin >> t;
	while (t--) {
		cin >> n;
		visited = vector<vector<bool>>(n, vector<bool>(n, 0));
		lp(i , n)
			scanf("%s", grid[i]);

		cout << "Case " << op++ << ": " << cntShips() << "\n";

	}

	return 0;
}
/*
 2
 4
 x...
 ..x.
 @.@.
 ....

 2
 ..
 x.


 1
 4
 X...
 x...
 @.x.
 ....
 */
