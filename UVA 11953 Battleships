#include <iostream>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;

#define lp(i , n)  for(int i = 0; i < n; ++i)
#define rep(i , v)  for(int i = 0; i <(int)v.size(); ++i)

//          u ur r dr d dl l lu
int di[] = { -1, 1, 0, 0 };
int dj[] = { 0, 0, 1, -1 };

int n;
char grid[101][101];
vector<vector<bool>> vis;

bool valid(int i, int j) {
	return i >= 0 && j >= 0 && i < n && j < n;
}

void dfs(int i, int j) {
	vis[i][j] = true;

	lp(m , 4)
	{
		int ni = i + di[m];
		int nj = j + dj[m];

		if (valid(ni, nj) && grid[ni][nj] != '.')
			if (!vis[ni][nj])
				dfs(ni, nj);

	}

}

int shipsCnt() {
	int cnt = 0;

	lp(i, n)
		lp(j , n)
		{
			if (grid[i][j] == 'x' && !vis[i][j]) {
				dfs(i, j);
				cnt++;
			}
		}
	return cnt;
}

int main() {
	int t;
	cin >> t;

	lp(j , t)
	{

		cin >> n;

		vis = vector<vector<bool>>(n, vector<bool>(n, 0));

		lp(i, n)
		{
			scanf("%s", grid[i]);
		}

		printf("Case %d: %d\n", j + 1, shipsCnt());

	}
	return 0;
}
// 01 : 03
